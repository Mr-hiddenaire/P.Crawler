from config import base as base_config
from config import coordinate
import logging
import re
import time
from PIL import Image
import pytesseract
from utils.selenium.chrome import browser
from selenium.common.exceptions import NoSuchElementException
from pyquery import PyQuery
from utils.tool import hash_with_blake2b
from services.content import ContentService

def do_original_source_crawler_with_selenium(url):
    url_hash = hash_with_blake2b(url)
    is_scraped = ContentService.is_page_scraped(url_hash, base_config.IS_EURO)

    if is_scraped is False:
        logging.info('url:' + url + ' >>>>>> hash:' + url_hash + ' is scraping')

        """ driver initialization """
        driver = break_defence(url)

        if driver is not None:
            driver.get(url)
            html = driver.page_source
            driver.close()

            return html
        else:
            logging.info('url:' + url + ' >>>>>> hash:' + url_hash + ' is scraped')

def break_defence(url):
    screenshot_filename = 'screenshot.png'
    captcha_filename = 'captcha.png'

    driver = browser.get_driver()
    driver.get(url)

    try:
        time.sleep(6)
        driver.find_element_by_link_text('Click here').click()
        driver.save_screenshot(screenshot_filename)
        make_screenshot_to_captcha_image(screenshot_filename, captcha_filename)
        captcha_number = solve_captcha_number_from_image(captcha_filename)

        driver.find_element_by_id('solve_string').send_keys(captcha_number)
        driver.find_element_by_id('button_submit').click()
        break_success = parse_break_defence_success(driver.page_source)

        if break_success is True:
            return driver
        else:
            driver.close()
            return None
    except NoSuchElementException:
        try:
            time.sleep(6)
            driver.save_screenshot(screenshot_filename)
            make_screenshot_to_captcha_image(screenshot_filename, captcha_filename)
            captcha_number = solve_captcha_number_from_image(captcha_filename)

            driver.find_element_by_id('solve_string').send_keys(captcha_number)
            driver.find_element_by_id('button_submit').click()
            break_success = parse_break_defence_success(driver.page_source)

            if break_success is True:
                return driver
            else:
                driver.close()
                return None
        except NoSuchElementException:
            return None

    return None

def make_screenshot_to_captcha_image(screenshot_filename, captcha_filename):
    im = Image.open(screenshot_filename)

    im2 = im.crop((coordinate.X, coordinate.Y, coordinate.X + coordinate.W, coordinate.Y + coordinate.H))
    im2.save(captcha_filename)

def solve_captcha_number_from_image(filename):
    img = Image.open(filename)
    number = pytesseract.image_to_string(img)

    return number

def parse_break_defence_success(html):
    pattern = re.compile('mcpslar')
    result = re.findall(pattern, html)

    if len(result) > 0:
        return True
    else:
        return False

def get_html_generator_according_to_original_html(original_html):
    doc = PyQuery(original_html)

    html_generator = doc('.lista2').items()

    return html_generator

def parse_data_according_to_html_generator(html_generator, base_url):
    result = []
    for html in html_generator:
        doc = PyQuery(html)

        name = doc('tr').find('td').eq(1).find('a').text()
        unique_id = 'NaN'
        """ Value assignation later """
        tags = ''
        types = base_config.IS_EURO
        """ No need it anymore. thumbnail will be generated by ffmpeg """
        thumb_url = ''
        """ Value assignation later """
        torrent_url = ''
        detail_url = base_config.CRAWLER_URL_EURO + doc('tr').find('td').eq(1).find('a').attr('href')
        pick_up_status = 0
        pick_up_time = 0
        is_archive = 0
        archive_priority = 0
        list_url_hash = hash_with_blake2b(base_url)
        detail_url_hash = hash_with_blake2b(detail_url)

        info = {
            'name': name,
            'unique_id': unique_id,
            'tags': tags,
            'types': types,
            'thumb_url': thumb_url,
            'torrent_url': torrent_url,
            'detail_url': detail_url,
            'pick_up_status': pick_up_status,
            'pick_up_time': pick_up_time,
            'is_archive': is_archive,
            'archive_priority': archive_priority,
            'list_url_hash': list_url_hash,
            'detail_url_hash': detail_url_hash,
        }

        result.append(info)

    return result